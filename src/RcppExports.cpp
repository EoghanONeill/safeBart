// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_imp_vars
NumericVector get_imp_vars(NumericVector split_vars, int num_col, NumericVector current_vars);
RcppExport SEXP _safeBart_get_imp_vars(SEXP split_varsSEXP, SEXP num_colSEXP, SEXP current_varsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type split_vars(split_varsSEXP);
    Rcpp::traits::input_parameter< int >::type num_col(num_colSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type current_vars(current_varsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_imp_vars(split_vars, num_col, current_vars));
    return rcpp_result_gen;
END_RCPP
}
// get_weighted_var_imp
List get_weighted_var_imp(int num_vars, NumericVector BIC, List sum_trees);
RcppExport SEXP _safeBart_get_weighted_var_imp(SEXP num_varsSEXP, SEXP BICSEXP, SEXP sum_treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_vars(num_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BIC(BICSEXP);
    Rcpp::traits::input_parameter< List >::type sum_trees(sum_treesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_weighted_var_imp(num_vars, BIC, sum_trees));
    return rcpp_result_gen;
END_RCPP
}
// sBART_onefunc_parallel
NumericVector sBART_onefunc_parallel(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, NumericMatrix test_datamat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx);
RcppExport SEXP _safeBart_sBART_onefunc_parallel(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    rcpp_result_gen = Rcpp::wrap(sBART_onefunc_parallel(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, test_datamat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx));
    return rcpp_result_gen;
END_RCPP
}
// sBCF_onefunc_parallel
NumericVector sBCF_onefunc_parallel(double lambda_mu, double lambda_tau, int num_models, int num_trees_mu, int num_trees_tau, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a_mu, double a_tau, double lambdaBCF, int valid_trees, int tree_prior, int imp_sampler, double alpha_BCF_mu, double beta_BCF_mu, double alpha_BCF_tau, double beta_BCF_tau, int include_pi2, int fast_approx, int PIT_propensity);
RcppExport SEXP _safeBart_sBCF_onefunc_parallel(SEXP lambda_muSEXP, SEXP lambda_tauSEXP, SEXP num_modelsSEXP, SEXP num_trees_muSEXP, SEXP num_trees_tauSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP lambdaBCFSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BCF_muSEXP, SEXP beta_BCF_muSEXP, SEXP alpha_BCF_tauSEXP, SEXP beta_BCF_tauSEXP, SEXP include_pi2SEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_mu(lambda_muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_mu(num_trees_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_tau(num_trees_tauSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBCF(lambdaBCFSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_mu(alpha_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_mu(beta_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_tau(alpha_BCF_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_tau(beta_BCF_tauSEXP);
    Rcpp::traits::input_parameter< int >::type include_pi2(include_pi2SEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    rcpp_result_gen = Rcpp::wrap(sBCF_onefunc_parallel(lambda_mu, lambda_tau, num_models, num_trees_mu, num_trees_tau, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a_mu, a_tau, lambdaBCF, valid_trees, tree_prior, imp_sampler, alpha_BCF_mu, beta_BCF_mu, alpha_BCF_tau, beta_BCF_tau, include_pi2, fast_approx, PIT_propensity));
    return rcpp_result_gen;
END_RCPP
}
// sBART_with_ints_parallel
List sBART_with_ints_parallel(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, NumericMatrix test_datamat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_sBART_with_ints_parallel(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(sBART_with_ints_parallel(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, test_datamat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// BARTIS_train
List BARTIS_train(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, NumericMatrix test_datamat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_BARTIS_train(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(BARTIS_train(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, test_datamat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// BARTIS_train_no_test_no_output
List BARTIS_train_no_test_no_output(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_BARTIS_train_no_test_no_output(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(BARTIS_train_no_test_no_output(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// get_termobs_test_data_fields
arma::field<arma::uvec> get_termobs_test_data_fields(NumericMatrix test_data, NumericMatrix tree_data);
RcppExport SEXP _safeBart_get_termobs_test_data_fields(SEXP test_dataSEXP, SEXP tree_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(get_termobs_test_data_fields(test_data, tree_data));
    return rcpp_result_gen;
END_RCPP
}
// pred_ints_exact_outsamp_par
List pred_ints_exact_outsamp_par(List overall_sum_trees, NumericVector ytrain, NumericVector post_weights, int num_obs, int num_test_obs, double a, double sigma, double mu_mu, double nu, double lambda, NumericMatrix test_datamat, double lower_prob, double upper_prob, int num_cores, double root_alg_precision, NumericMatrix original_datamat);
RcppExport SEXP _safeBart_pred_ints_exact_outsamp_par(SEXP overall_sum_treesSEXP, SEXP ytrainSEXP, SEXP post_weightsSEXP, SEXP num_obsSEXP, SEXP num_test_obsSEXP, SEXP aSEXP, SEXP sigmaSEXP, SEXP mu_muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP test_datamatSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP num_coresSEXP, SEXP root_alg_precisionSEXP, SEXP original_datamatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type overall_sum_trees(overall_sum_treesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type post_weights(post_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    Rcpp::traits::input_parameter< int >::type num_test_obs(num_test_obsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< int >::type num_cores(num_coresSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_ints_exact_outsamp_par(overall_sum_trees, ytrain, post_weights, num_obs, num_test_obs, a, sigma, mu_mu, nu, lambda, test_datamat, lower_prob, upper_prob, num_cores, root_alg_precision, original_datamat));
    return rcpp_result_gen;
END_RCPP
}
// sBCF_with_ints_parallel
List sBCF_with_ints_parallel(double lambda_mu, double lambda_tau, int num_models, int num_trees_mu, int num_trees_tau, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a_mu, double a_tau, double lambdaBCF, int valid_trees, int tree_prior, int imp_sampler, double alpha_BCF_mu, double beta_BCF_mu, double alpha_BCF_tau, double beta_BCF_tau, int include_pi2, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_sBCF_with_ints_parallel(SEXP lambda_muSEXP, SEXP lambda_tauSEXP, SEXP num_modelsSEXP, SEXP num_trees_muSEXP, SEXP num_trees_tauSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP lambdaBCFSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BCF_muSEXP, SEXP beta_BCF_muSEXP, SEXP alpha_BCF_tauSEXP, SEXP beta_BCF_tauSEXP, SEXP include_pi2SEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_mu(lambda_muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_mu(num_trees_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_tau(num_trees_tauSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBCF(lambdaBCFSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_mu(alpha_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_mu(beta_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_tau(alpha_BCF_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_tau(beta_BCF_tauSEXP);
    Rcpp::traits::input_parameter< int >::type include_pi2(include_pi2SEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(sBCF_with_ints_parallel(lambda_mu, lambda_tau, num_models, num_trees_mu, num_trees_tau, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a_mu, a_tau, lambdaBCF, valid_trees, tree_prior, imp_sampler, alpha_BCF_mu, beta_BCF_mu, alpha_BCF_tau, beta_BCF_tau, include_pi2, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// sBCF_train
List sBCF_train(double lambda_mu, double lambda_tau, int num_models, int num_trees_mu, int num_trees_tau, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a_mu, double a_tau, double lambdaBCF, int valid_trees, int tree_prior, int imp_sampler, double alpha_BCF_mu, double beta_BCF_mu, double alpha_BCF_tau, double beta_BCF_tau, int include_pi2, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_sBCF_train(SEXP lambda_muSEXP, SEXP lambda_tauSEXP, SEXP num_modelsSEXP, SEXP num_trees_muSEXP, SEXP num_trees_tauSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP lambdaBCFSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BCF_muSEXP, SEXP beta_BCF_muSEXP, SEXP alpha_BCF_tauSEXP, SEXP beta_BCF_tauSEXP, SEXP include_pi2SEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_mu(lambda_muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_mu(num_trees_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_tau(num_trees_tauSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBCF(lambdaBCFSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_mu(alpha_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_mu(beta_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_tau(alpha_BCF_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_tau(beta_BCF_tauSEXP);
    Rcpp::traits::input_parameter< int >::type include_pi2(include_pi2SEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(sBCF_train(lambda_mu, lambda_tau, num_models, num_trees_mu, num_trees_tau, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a_mu, a_tau, lambdaBCF, valid_trees, tree_prior, imp_sampler, alpha_BCF_mu, beta_BCF_mu, alpha_BCF_tau, beta_BCF_tau, include_pi2, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// sBCF_train_no_test_no_output
List sBCF_train_no_test_no_output(double lambda_mu, double lambda_tau, int num_models, int num_trees_mu, int num_trees_tau, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, int ncores, int outsamppreds, double nu, double a_mu, double a_tau, double lambdaBCF, int valid_trees, int tree_prior, int imp_sampler, double alpha_BCF_mu, double beta_BCF_mu, double alpha_BCF_tau, double beta_BCF_tau, int include_pi2, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_sBCF_train_no_test_no_output(SEXP lambda_muSEXP, SEXP lambda_tauSEXP, SEXP num_modelsSEXP, SEXP num_trees_muSEXP, SEXP num_trees_tauSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP lambdaBCFSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BCF_muSEXP, SEXP beta_BCF_muSEXP, SEXP alpha_BCF_tauSEXP, SEXP beta_BCF_tauSEXP, SEXP include_pi2SEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_mu(lambda_muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_mu(num_trees_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_tau(num_trees_tauSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBCF(lambdaBCFSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_mu(alpha_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_mu(beta_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_tau(alpha_BCF_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_tau(beta_BCF_tauSEXP);
    Rcpp::traits::input_parameter< int >::type include_pi2(include_pi2SEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(sBCF_train_no_test_no_output(lambda_mu, lambda_tau, num_models, num_trees_mu, num_trees_tau, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, ncores, outsamppreds, nu, a_mu, a_tau, lambdaBCF, valid_trees, tree_prior, imp_sampler, alpha_BCF_mu, beta_BCF_mu, alpha_BCF_tau, beta_BCF_tau, include_pi2, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// sBART_ITEs_with_ints
List sBART_ITEs_with_ints(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision);
RcppExport SEXP _safeBart_sBART_ITEs_with_ints(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(sBART_ITEs_with_ints(lambda, num_models, num_trees, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// LBART_IS
List LBART_IS(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, NumericMatrix test_datamat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, double lower_prob, double upper_prob, double root_alg_precision, int maxit, double eps_f, double eps_g);
RcppExport SEXP _safeBart_LBART_IS(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    rcpp_result_gen = Rcpp::wrap(LBART_IS(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, test_datamat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, lower_prob, upper_prob, root_alg_precision, maxit, eps_f, eps_g));
    return rcpp_result_gen;
END_RCPP
}
// LBART_IS_ITEs
List LBART_IS_ITEs(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision, int maxit, double eps_f, double eps_g, int num_iter, int include_cate_intervals);
RcppExport SEXP _safeBart_LBART_IS_ITEs(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP num_iterSEXP, SEXP include_cate_intervalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< int >::type include_cate_intervals(include_cate_intervalsSEXP);
    rcpp_result_gen = Rcpp::wrap(LBART_IS_ITEs(lambda, num_models, num_trees, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision, maxit, eps_f, eps_g, num_iter, include_cate_intervals));
    return rcpp_result_gen;
END_RCPP
}
// LBCF_IS
List LBCF_IS(double lambda_mu, double lambda_tau, int num_models, int num_trees_mu, int num_trees_tau, int seed, NumericVector ytrain, NumericMatrix original_datamat, NumericVector ztrain, NumericMatrix pihat_train, double beta_par, NumericMatrix test_datamat, NumericMatrix test_pihat, int ncores, int outsamppreds, double nu, double a_mu, double a_tau, double lambdaBCF, int valid_trees, int tree_prior, int imp_sampler, double alpha_BCF_mu, double beta_BCF_mu, double alpha_BCF_tau, double beta_BCF_tau, int include_pi2, int fast_approx, int PIT_propensity, double lower_prob, double upper_prob, double root_alg_precision, int maxit, double eps_f, double eps_g, int num_iter, int include_cate_intervals);
RcppExport SEXP _safeBart_LBCF_IS(SEXP lambda_muSEXP, SEXP lambda_tauSEXP, SEXP num_modelsSEXP, SEXP num_trees_muSEXP, SEXP num_trees_tauSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP ztrainSEXP, SEXP pihat_trainSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP test_pihatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP lambdaBCFSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BCF_muSEXP, SEXP beta_BCF_muSEXP, SEXP alpha_BCF_tauSEXP, SEXP beta_BCF_tauSEXP, SEXP include_pi2SEXP, SEXP fast_approxSEXP, SEXP PIT_propensitySEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP num_iterSEXP, SEXP include_cate_intervalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda_mu(lambda_muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_mu(num_trees_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees_tau(num_trees_tauSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ztrain(ztrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat_train(pihat_trainSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBCF(lambdaBCFSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_mu(alpha_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_mu(beta_BCF_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BCF_tau(alpha_BCF_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BCF_tau(beta_BCF_tauSEXP);
    Rcpp::traits::input_parameter< int >::type include_pi2(include_pi2SEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< int >::type PIT_propensity(PIT_propensitySEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< int >::type include_cate_intervals(include_cate_intervalsSEXP);
    rcpp_result_gen = Rcpp::wrap(LBCF_IS(lambda_mu, lambda_tau, num_models, num_trees_mu, num_trees_tau, seed, ytrain, original_datamat, ztrain, pihat_train, beta_par, test_datamat, test_pihat, ncores, outsamppreds, nu, a_mu, a_tau, lambdaBCF, valid_trees, tree_prior, imp_sampler, alpha_BCF_mu, beta_BCF_mu, alpha_BCF_tau, beta_BCF_tau, include_pi2, fast_approx, PIT_propensity, lower_prob, upper_prob, root_alg_precision, maxit, eps_f, eps_g, num_iter, include_cate_intervals));
    return rcpp_result_gen;
END_RCPP
}
// scale_response
NumericVector scale_response(double a, double b, double c, double d, NumericVector y);
RcppExport SEXP _safeBart_scale_response(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scale_response(a, b, c, d, y));
    return rcpp_result_gen;
END_RCPP
}
// get_original
NumericVector get_original(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _safeBart_get_original(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// get_original_arma
arma::vec get_original_arma(double low, double high, double sp_low, double sp_high, arma::vec sum_preds);
RcppExport SEXP _safeBart_get_original_arma(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_arma(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// get_original_TE
NumericVector get_original_TE(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _safeBart_get_original_TE(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_TE(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// get_original_TE_double
double get_original_TE_double(double low, double high, double sp_low, double sp_high, double sum_preds);
RcppExport SEXP _safeBart_get_original_TE_double(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< double >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_TE_double(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// get_original_TE_arma
arma::vec get_original_TE_arma(double low, double high, double sp_low, double sp_high, arma::vec sum_preds);
RcppExport SEXP _safeBart_get_original_TE_arma(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_TE_arma(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes
NumericVector find_term_nodes(NumericMatrix tree_table);
RcppExport SEXP _safeBart_find_term_nodes(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes2
NumericVector find_term_nodes2(NumericMatrix tree_table);
RcppExport SEXP _safeBart_find_term_nodes2(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes2(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// secondKindStirlingNumber
double secondKindStirlingNumber(int n, int k);
RcppExport SEXP _safeBart_secondKindStirlingNumber(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(secondKindStirlingNumber(n, k));
    return rcpp_result_gen;
END_RCPP
}
// mixt_eval_cdf
double mixt_eval_cdf(double x_val, double d_o_f, std::vector<double> mean_vec, std::vector<double> var_vec, std::vector<double> weights_vec, double quant_val);
RcppExport SEXP _safeBart_mixt_eval_cdf(SEXP x_valSEXP, SEXP d_o_fSEXP, SEXP mean_vecSEXP, SEXP var_vecSEXP, SEXP weights_vecSEXP, SEXP quant_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< double >::type d_o_f(d_o_fSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights_vec(weights_vecSEXP);
    Rcpp::traits::input_parameter< double >::type quant_val(quant_valSEXP);
    rcpp_result_gen = Rcpp::wrap(mixt_eval_cdf(x_val, d_o_f, mean_vec, var_vec, weights_vec, quant_val));
    return rcpp_result_gen;
END_RCPP
}
// mixnorm_eval_cdf
double mixnorm_eval_cdf(double x_val, std::vector<double> mean_vec, std::vector<double> var_vec, std::vector<double> weights_vec, double quant_val);
RcppExport SEXP _safeBart_mixnorm_eval_cdf(SEXP x_valSEXP, SEXP mean_vecSEXP, SEXP var_vecSEXP, SEXP weights_vecSEXP, SEXP quant_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights_vec(weights_vecSEXP);
    Rcpp::traits::input_parameter< double >::type quant_val(quant_valSEXP);
    rcpp_result_gen = Rcpp::wrap(mixnorm_eval_cdf(x_val, mean_vec, var_vec, weights_vec, quant_val));
    return rcpp_result_gen;
END_RCPP
}
// rootmixt
double rootmixt(double d_o_f, double a, double b, std::vector<double> mean_vec, std::vector<double> var_vec, std::vector<double> weights_vec, double quant_val, double root_alg_precision);
RcppExport SEXP _safeBart_rootmixt(SEXP d_o_fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP mean_vecSEXP, SEXP var_vecSEXP, SEXP weights_vecSEXP, SEXP quant_valSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d_o_f(d_o_fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights_vec(weights_vecSEXP);
    Rcpp::traits::input_parameter< double >::type quant_val(quant_valSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(rootmixt(d_o_f, a, b, mean_vec, var_vec, weights_vec, quant_val, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// rootmixnorm
double rootmixnorm(double a, double b, std::vector<double> mean_vec, std::vector<double> var_vec, std::vector<double> weights_vec, double quant_val, double root_alg_precision);
RcppExport SEXP _safeBart_rootmixnorm(SEXP aSEXP, SEXP bSEXP, SEXP mean_vecSEXP, SEXP var_vecSEXP, SEXP weights_vecSEXP, SEXP quant_valSEXP, SEXP root_alg_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weights_vec(weights_vecSEXP);
    Rcpp::traits::input_parameter< double >::type quant_val(quant_valSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(rootmixnorm(a, b, mean_vec, var_vec, weights_vec, quant_val, root_alg_precision));
    return rcpp_result_gen;
END_RCPP
}
// Tobit_BART_IS
List Tobit_BART_IS(double lambda, int num_models, int num_trees, int seed, NumericVector ytrain, NumericMatrix original_datamat, double beta_par, NumericMatrix test_datamat, int ncores, int outsamppreds, double nu, double a, double lambdaBART, int valid_trees, int tree_prior, int imp_sampler, double alpha_BART, double beta_BART, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double lambda_poisson, int fast_approx, double lower_prob, double upper_prob, double root_alg_precision, int maxit, double eps_f, double eps_g, double below_cens2);
RcppExport SEXP _safeBart_Tobit_BART_IS(SEXP lambdaSEXP, SEXP num_modelsSEXP, SEXP num_treesSEXP, SEXP seedSEXP, SEXP ytrainSEXP, SEXP original_datamatSEXP, SEXP beta_parSEXP, SEXP test_datamatSEXP, SEXP ncoresSEXP, SEXP outsamppredsSEXP, SEXP nuSEXP, SEXP aSEXP, SEXP lambdaBARTSEXP, SEXP valid_treesSEXP, SEXP tree_priorSEXP, SEXP imp_samplerSEXP, SEXP alpha_BARTSEXP, SEXP beta_BARTSEXP, SEXP s_t_hyperpriorSEXP, SEXP p_s_tSEXP, SEXP a_s_tSEXP, SEXP b_s_tSEXP, SEXP lambda_poissonSEXP, SEXP fast_approxSEXP, SEXP lower_probSEXP, SEXP upper_probSEXP, SEXP root_alg_precisionSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP below_cens2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_models(num_modelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytrain(ytrainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original_datamat(original_datamatSEXP);
    Rcpp::traits::input_parameter< double >::type beta_par(beta_parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_datamat(test_datamatSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type outsamppreds(outsamppredsSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBART(lambdaBARTSEXP);
    Rcpp::traits::input_parameter< int >::type valid_trees(valid_treesSEXP);
    Rcpp::traits::input_parameter< int >::type tree_prior(tree_priorSEXP);
    Rcpp::traits::input_parameter< int >::type imp_sampler(imp_samplerSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_BART(alpha_BARTSEXP);
    Rcpp::traits::input_parameter< double >::type beta_BART(beta_BARTSEXP);
    Rcpp::traits::input_parameter< int >::type s_t_hyperprior(s_t_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type p_s_t(p_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type a_s_t(a_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type b_s_t(b_s_tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_poisson(lambda_poissonSEXP);
    Rcpp::traits::input_parameter< int >::type fast_approx(fast_approxSEXP);
    Rcpp::traits::input_parameter< double >::type lower_prob(lower_probSEXP);
    Rcpp::traits::input_parameter< double >::type upper_prob(upper_probSEXP);
    Rcpp::traits::input_parameter< double >::type root_alg_precision(root_alg_precisionSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< double >::type below_cens2(below_cens2SEXP);
    rcpp_result_gen = Rcpp::wrap(Tobit_BART_IS(lambda, num_models, num_trees, seed, ytrain, original_datamat, beta_par, test_datamat, ncores, outsamppreds, nu, a, lambdaBART, valid_trees, tree_prior, imp_sampler, alpha_BART, beta_BART, s_t_hyperprior, p_s_t, a_s_t, b_s_t, lambda_poisson, fast_approx, lower_prob, upper_prob, root_alg_precision, maxit, eps_f, eps_g, below_cens2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_safeBart_get_imp_vars", (DL_FUNC) &_safeBart_get_imp_vars, 3},
    {"_safeBart_get_weighted_var_imp", (DL_FUNC) &_safeBart_get_weighted_var_imp, 3},
    {"_safeBart_sBART_onefunc_parallel", (DL_FUNC) &_safeBart_sBART_onefunc_parallel, 24},
    {"_safeBart_sBCF_onefunc_parallel", (DL_FUNC) &_safeBart_sBCF_onefunc_parallel, 29},
    {"_safeBart_sBART_with_ints_parallel", (DL_FUNC) &_safeBart_sBART_with_ints_parallel, 27},
    {"_safeBart_BARTIS_train", (DL_FUNC) &_safeBart_BARTIS_train, 27},
    {"_safeBart_BARTIS_train_no_test_no_output", (DL_FUNC) &_safeBart_BARTIS_train_no_test_no_output, 26},
    {"_safeBart_get_termobs_test_data_fields", (DL_FUNC) &_safeBart_get_termobs_test_data_fields, 2},
    {"_safeBart_pred_ints_exact_outsamp_par", (DL_FUNC) &_safeBart_pred_ints_exact_outsamp_par, 16},
    {"_safeBart_sBCF_with_ints_parallel", (DL_FUNC) &_safeBart_sBCF_with_ints_parallel, 32},
    {"_safeBart_sBCF_train", (DL_FUNC) &_safeBart_sBCF_train, 32},
    {"_safeBart_sBCF_train_no_test_no_output", (DL_FUNC) &_safeBart_sBCF_train_no_test_no_output, 30},
    {"_safeBart_sBART_ITEs_with_ints", (DL_FUNC) &_safeBart_sBART_ITEs_with_ints, 31},
    {"_safeBart_LBART_IS", (DL_FUNC) &_safeBart_LBART_IS, 30},
    {"_safeBart_LBART_IS_ITEs", (DL_FUNC) &_safeBart_LBART_IS_ITEs, 36},
    {"_safeBart_LBCF_IS", (DL_FUNC) &_safeBart_LBCF_IS, 37},
    {"_safeBart_scale_response", (DL_FUNC) &_safeBart_scale_response, 5},
    {"_safeBart_get_original", (DL_FUNC) &_safeBart_get_original, 5},
    {"_safeBart_get_original_arma", (DL_FUNC) &_safeBart_get_original_arma, 5},
    {"_safeBart_get_original_TE", (DL_FUNC) &_safeBart_get_original_TE, 5},
    {"_safeBart_get_original_TE_double", (DL_FUNC) &_safeBart_get_original_TE_double, 5},
    {"_safeBart_get_original_TE_arma", (DL_FUNC) &_safeBart_get_original_TE_arma, 5},
    {"_safeBart_find_term_nodes", (DL_FUNC) &_safeBart_find_term_nodes, 1},
    {"_safeBart_find_term_nodes2", (DL_FUNC) &_safeBart_find_term_nodes2, 1},
    {"_safeBart_secondKindStirlingNumber", (DL_FUNC) &_safeBart_secondKindStirlingNumber, 2},
    {"_safeBart_mixt_eval_cdf", (DL_FUNC) &_safeBart_mixt_eval_cdf, 6},
    {"_safeBart_mixnorm_eval_cdf", (DL_FUNC) &_safeBart_mixnorm_eval_cdf, 5},
    {"_safeBart_rootmixt", (DL_FUNC) &_safeBart_rootmixt, 8},
    {"_safeBart_rootmixnorm", (DL_FUNC) &_safeBart_rootmixnorm, 7},
    {"_safeBart_Tobit_BART_IS", (DL_FUNC) &_safeBart_Tobit_BART_IS, 31},
    {NULL, NULL, 0}
};

RcppExport void R_init_safeBart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
